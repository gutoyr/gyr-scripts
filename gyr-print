#!/bin/bash
##################################
#
# Author: Gustavo Yokoyama Ribeiro
# File:   gyr-print
# Update: 20100815 14:31:15
# (C) Copyright 2010 Gustavo Yokoyama Ribeiro
# Licensed under CreativeCommons Attribution-ShareAlike 3.0 Unsupported
# http://creativecommons.org/licenses/by-sa/3.0/ for more info.
# Description: Display a message error for a command.
# Usage: gyr-print <type> "<command>" ["error_msg"]
#   -i: info message
#   -e: error message
#   -l: log message
#
##################################

[ "$1" = '--help' ] && { gyr-print-helper $0; exit 0; }

# Always exit on errors
set -e
# Undefined variables, we don't like you
set -u
# ERR traps are inherited by shell functions, command substitutions and
# commands executed in a subshell environment.
set -E

COLOR_LIGHT_RED='\033[1;31m'
COLOR_LIGHT_GREEN='\033[1;32m'
COLOR_LIGHT_YELLOW='\033[1;33m'
COLOR_LIGHT_BLUE='\033[1;34m'
COLOR_LIGHT_MAGENTA='\033[1;35m'
COLOR_LIGHT_CYAN='\033[1;36m'
COLOR_LIGHT_WHITE='\033[1;37m'
COLOR_RESET='\033[00m'
MSG_TEXT=""
if [ $# -eq 0 ]; then
    MSG_TYPE="${COLOR_LIGHT_RED}[ERROR]${COLOR_RESET}"
    MSG_MAIN="Syntax error."
fi

while getopts ':i:e:l:' OPT_NAME 2> /dev/null; do
    case ${OPT_NAME} in
        'i')
            MSG_TYPE="${COLOR_LIGHT_BLUE}[INFO]${COLOR_RESET}"
            MSG_MAIN=${OPTARG}
        ;;
        'e')
            MSG_TYPE="${COLOR_LIGHT_RED}[ERROR]${COLOR_RESET}"
            MSG_MAIN=${OPTARG}
            MSG_TEXT=": Syntax error."
        ;;
        'l')
            MSG_TYPE="${COLOR_LIGHT_CYAN}[LOG]${COLOR_RESET}"
            MSG_MAIN=${OPTARG}
        ;;
        '?')
            echo -e "${COLOR_LIGHT_RED}[ERROR]${COLOR_RESET} Invalid option: -${OPTARG}."
            exit 1
        ;;
        ':')
            echo  -e "${COLOR_LIGHT_RED}[ERROR]${COLOR_RESET} Required argument not found for option -${OPTARG}."
            exit 1
        ;;
        *)
            echo  -e "${COLOR_LIGHT_RED}[ERROR]${COLOR_RESET} Unknown error while processing options."
            exit 1
        ;;
    esac
done
(( OPTIND > 1 )) && shift $(( OPTIND - 1 ))

if [ -z "${MSG_TEXT}" ]; then
    [ $# -eq 1 ] && MSG_TEXT="$1"
    echo -e "${MSG_TYPE} - ${MSG_MAIN} ${MSG_TEXT}"
else
    [ $# -eq 1 ] && MSG_TEXT="$1"
    echo -e "${MSG_TYPE} - ${MSG_MAIN} ${MSG_TEXT}" >&2
fi
